// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     spec.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

// Representation of a JSON Value
type CloudEventData struct {
	Value map[string]*UnionNullBoolMapCloudEventDataArrayCloudEventDataDoubleString `json:"value"`
}

const CloudEventDataAvroCRC64Fingerprint = "\xbbi\x80\x03\xe75\xe5\x0e"

func NewCloudEventData() CloudEventData {
	r := CloudEventData{}
	r.Value = make(map[string]*UnionNullBoolMapCloudEventDataArrayCloudEventDataDoubleString)

	return r
}

func DeserializeCloudEventData(r io.Reader) (CloudEventData, error) {
	t := NewCloudEventData()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCloudEventDataFromSchema(r io.Reader, schema string) (CloudEventData, error) {
	t := NewCloudEventData()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCloudEventData(r CloudEventData, w io.Writer) error {
	var err error
	err = writeMapUnionNullBoolMapCloudEventDataArrayCloudEventDataDoubleString(r.Value, w)
	if err != nil {
		return err
	}
	return err
}

func (r CloudEventData) Serialize(w io.Writer) error {
	return writeCloudEventData(r, w)
}

func (r CloudEventData) Schema() string {
	return "{\"doc\":\"Representation of a JSON Value\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"map\",\"values\":[\"null\",\"boolean\",{\"type\":\"map\",\"values\":\"io.cloudevents.CloudEventData\"},{\"items\":\"io.cloudevents.CloudEventData\",\"type\":\"array\"},\"double\",\"string\"]}}],\"name\":\"io.cloudevents.CloudEventData\",\"type\":\"record\"}"
}

func (r CloudEventData) SchemaName() string {
	return "io.cloudevents.CloudEventData"
}

func (_ CloudEventData) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CloudEventData) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CloudEventData) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CloudEventData) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CloudEventData) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CloudEventData) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CloudEventData) SetString(v string)   { panic("Unsupported operation") }
func (_ CloudEventData) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CloudEventData) Get(i int) types.Field {
	switch i {
	case 0:
		r.Value = make(map[string]*UnionNullBoolMapCloudEventDataArrayCloudEventDataDoubleString)

		w := MapUnionNullBoolMapCloudEventDataArrayCloudEventDataDoubleStringWrapper{Target: &r.Value}

		return &w

	}
	panic("Unknown field index")
}

func (r *CloudEventData) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *CloudEventData) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ CloudEventData) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CloudEventData) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CloudEventData) HintSize(int)                     { panic("Unsupported operation") }
func (_ CloudEventData) Finalize()                        {}

func (_ CloudEventData) AvroCRC64Fingerprint() []byte {
	return []byte(CloudEventDataAvroCRC64Fingerprint)
}

func (r CloudEventData) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["value"], err = json.Marshal(r.Value)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CloudEventData) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["value"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Value); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for value")
	}
	return nil
}
