// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     spec.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

// Avro Event Format for CloudEvents
type AvroCloudEvent struct {
	Attribute map[string]*UnionNullBoolIntStringBytes `json:"attribute"`

	Data *UnionBytesNullBoolMapUnionNullBoolAvroCloudEventDataDoubleStringArrayAvroCloudEventDataDoubleString `json:"data"`
}

const AvroCloudEventAvroCRC64Fingerprint = "#\xbe\x04>â®„\xd9"

func NewAvroCloudEvent() AvroCloudEvent {
	r := AvroCloudEvent{}
	r.Attribute = make(map[string]*UnionNullBoolIntStringBytes)

	r.Data = NewUnionBytesNullBoolMapUnionNullBoolAvroCloudEventDataDoubleStringArrayAvroCloudEventDataDoubleString()

	return r
}

func DeserializeAvroCloudEvent(r io.Reader) (AvroCloudEvent, error) {
	t := NewAvroCloudEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAvroCloudEventFromSchema(r io.Reader, schema string) (AvroCloudEvent, error) {
	t := NewAvroCloudEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAvroCloudEvent(r AvroCloudEvent, w io.Writer) error {
	var err error
	err = writeMapUnionNullBoolIntStringBytes(r.Attribute, w)
	if err != nil {
		return err
	}
	err = writeUnionBytesNullBoolMapUnionNullBoolAvroCloudEventDataDoubleStringArrayAvroCloudEventDataDoubleString(r.Data, w)
	if err != nil {
		return err
	}
	return err
}

func (r AvroCloudEvent) Serialize(w io.Writer) error {
	return writeAvroCloudEvent(r, w)
}

func (r AvroCloudEvent) Schema() string {
	return "{\"doc\":\"Avro Event Format for CloudEvents\",\"fields\":[{\"name\":\"attribute\",\"type\":{\"type\":\"map\",\"values\":[\"null\",\"boolean\",\"int\",\"string\",\"bytes\"]}},{\"name\":\"data\",\"type\":[\"bytes\",\"null\",\"boolean\",{\"type\":\"map\",\"values\":[\"null\",\"boolean\",{\"doc\":\"Representation of a JSON Value\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"map\",\"values\":[\"null\",\"boolean\",{\"type\":\"map\",\"values\":\"io.cloudevents.AvroCloudEventData\"},{\"items\":\"io.cloudevents.AvroCloudEventData\",\"type\":\"array\"},\"double\",\"string\"]}}],\"name\":\"AvroCloudEventData\",\"type\":\"record\"},\"double\",\"string\"]},{\"items\":\"io.cloudevents.AvroCloudEventData\",\"type\":\"array\"},\"double\",\"string\"]}],\"name\":\"io.cloudevents.AvroCloudEvent\",\"type\":\"record\",\"version\":\"1.0\"}"
}

func (r AvroCloudEvent) SchemaName() string {
	return "io.cloudevents.AvroCloudEvent"
}

func (_ AvroCloudEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ AvroCloudEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ AvroCloudEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ AvroCloudEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ AvroCloudEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ AvroCloudEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ AvroCloudEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ AvroCloudEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *AvroCloudEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.Attribute = make(map[string]*UnionNullBoolIntStringBytes)

		return &MapUnionNullBoolIntStringBytesWrapper{Target: &r.Attribute}
	case 1:
		r.Data = NewUnionBytesNullBoolMapUnionNullBoolAvroCloudEventDataDoubleStringArrayAvroCloudEventDataDoubleString()

		return r.Data
	}
	panic("Unknown field index")
}

func (r *AvroCloudEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *AvroCloudEvent) NullField(i int) {
	switch i {
	case 1:
		r.Data = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ AvroCloudEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ AvroCloudEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ AvroCloudEvent) Finalize()                        {}

func (_ AvroCloudEvent) AvroCRC64Fingerprint() []byte {
	return []byte(AvroCloudEventAvroCRC64Fingerprint)
}

func (r AvroCloudEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["attribute"], err = json.Marshal(r.Attribute)
	if err != nil {
		return nil, err
	}
	output["data"], err = json.Marshal(r.Data)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *AvroCloudEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["attribute"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Attribute); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for attribute")
	}
	val = func() json.RawMessage {
		if v, ok := fields["data"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Data); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for data")
	}
	return nil
}
