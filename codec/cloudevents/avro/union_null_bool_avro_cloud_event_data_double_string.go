// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     spec.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

type UnionNullBoolAvroCloudEventDataDoubleStringTypeEnum int

const (
	UnionNullBoolAvroCloudEventDataDoubleStringTypeEnumBool UnionNullBoolAvroCloudEventDataDoubleStringTypeEnum = 1

	UnionNullBoolAvroCloudEventDataDoubleStringTypeEnumAvroCloudEventData UnionNullBoolAvroCloudEventDataDoubleStringTypeEnum = 2

	UnionNullBoolAvroCloudEventDataDoubleStringTypeEnumDouble UnionNullBoolAvroCloudEventDataDoubleStringTypeEnum = 3

	UnionNullBoolAvroCloudEventDataDoubleStringTypeEnumString UnionNullBoolAvroCloudEventDataDoubleStringTypeEnum = 4
)

type UnionNullBoolAvroCloudEventDataDoubleString struct {
	Null               *types.NullVal
	Bool               bool
	AvroCloudEventData AvroCloudEventData
	Double             float64
	String             string
	UnionType          UnionNullBoolAvroCloudEventDataDoubleStringTypeEnum
}

func writeUnionNullBoolAvroCloudEventDataDoubleString(r *UnionNullBoolAvroCloudEventDataDoubleString, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullBoolAvroCloudEventDataDoubleStringTypeEnumBool:
		return vm.WriteBool(r.Bool, w)
	case UnionNullBoolAvroCloudEventDataDoubleStringTypeEnumAvroCloudEventData:
		return writeAvroCloudEventData(r.AvroCloudEventData, w)
	case UnionNullBoolAvroCloudEventDataDoubleStringTypeEnumDouble:
		return vm.WriteDouble(r.Double, w)
	case UnionNullBoolAvroCloudEventDataDoubleStringTypeEnumString:
		return vm.WriteString(r.String, w)
	}
	return fmt.Errorf("invalid value for *UnionNullBoolAvroCloudEventDataDoubleString")
}

func NewUnionNullBoolAvroCloudEventDataDoubleString() *UnionNullBoolAvroCloudEventDataDoubleString {
	return &UnionNullBoolAvroCloudEventDataDoubleString{}
}

func (r *UnionNullBoolAvroCloudEventDataDoubleString) Serialize(w io.Writer) error {
	return writeUnionNullBoolAvroCloudEventDataDoubleString(r, w)
}

func DeserializeUnionNullBoolAvroCloudEventDataDoubleString(r io.Reader) (*UnionNullBoolAvroCloudEventDataDoubleString, error) {
	t := NewUnionNullBoolAvroCloudEventDataDoubleString()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullBoolAvroCloudEventDataDoubleStringFromSchema(r io.Reader, schema string) (*UnionNullBoolAvroCloudEventDataDoubleString, error) {
	t := NewUnionNullBoolAvroCloudEventDataDoubleString()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullBoolAvroCloudEventDataDoubleString) Schema() string {
	return "[\"null\",\"boolean\",{\"doc\":\"Representation of a JSON Value\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"map\",\"values\":[\"null\",\"boolean\",{\"type\":\"map\",\"values\":\"io.cloudevents.AvroCloudEventData\"},{\"items\":\"io.cloudevents.AvroCloudEventData\",\"type\":\"array\"},\"double\",\"string\"]}}],\"name\":\"AvroCloudEventData\",\"type\":\"record\"},\"double\",\"string\"]"
}

func (_ *UnionNullBoolAvroCloudEventDataDoubleString) SetBoolean(v bool) {
	panic("Unsupported operation")
}
func (_ *UnionNullBoolAvroCloudEventDataDoubleString) SetInt(v int32) { panic("Unsupported operation") }
func (_ *UnionNullBoolAvroCloudEventDataDoubleString) SetFloat(v float32) {
	panic("Unsupported operation")
}
func (_ *UnionNullBoolAvroCloudEventDataDoubleString) SetDouble(v float64) {
	panic("Unsupported operation")
}
func (_ *UnionNullBoolAvroCloudEventDataDoubleString) SetBytes(v []byte) {
	panic("Unsupported operation")
}
func (_ *UnionNullBoolAvroCloudEventDataDoubleString) SetString(v string) {
	panic("Unsupported operation")
}

func (r *UnionNullBoolAvroCloudEventDataDoubleString) SetLong(v int64) {

	r.UnionType = (UnionNullBoolAvroCloudEventDataDoubleStringTypeEnum)(v)
}

func (r *UnionNullBoolAvroCloudEventDataDoubleString) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		return &types.Boolean{Target: (&r.Bool)}
	case 2:
		r.AvroCloudEventData = NewAvroCloudEventData()
		return &types.Record{Target: (&r.AvroCloudEventData)}
	case 3:
		return &types.Double{Target: (&r.Double)}
	case 4:
		return &types.String{Target: (&r.String)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullBoolAvroCloudEventDataDoubleString) NullField(i int) {
	panic("Unsupported operation")
}
func (_ *UnionNullBoolAvroCloudEventDataDoubleString) SetDefault(i int) {
	panic("Unsupported operation")
}
func (_ *UnionNullBoolAvroCloudEventDataDoubleString) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullBoolAvroCloudEventDataDoubleString) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullBoolAvroCloudEventDataDoubleString) Finalize() {}

func (r *UnionNullBoolAvroCloudEventDataDoubleString) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullBoolAvroCloudEventDataDoubleStringTypeEnumBool:
		return json.Marshal(map[string]interface{}{"boolean": r.Bool})
	case UnionNullBoolAvroCloudEventDataDoubleStringTypeEnumAvroCloudEventData:
		return json.Marshal(map[string]interface{}{"io.cloudevents.AvroCloudEventData": r.AvroCloudEventData})
	case UnionNullBoolAvroCloudEventDataDoubleStringTypeEnumDouble:
		return json.Marshal(map[string]interface{}{"double": r.Double})
	case UnionNullBoolAvroCloudEventDataDoubleStringTypeEnumString:
		return json.Marshal(map[string]interface{}{"string": r.String})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullBoolAvroCloudEventDataDoubleString")
}

func (r *UnionNullBoolAvroCloudEventDataDoubleString) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["boolean"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.Bool)
	}
	if value, ok := fields["io.cloudevents.AvroCloudEventData"]; ok {
		r.UnionType = 2
		return json.Unmarshal([]byte(value), &r.AvroCloudEventData)
	}
	if value, ok := fields["double"]; ok {
		r.UnionType = 3
		return json.Unmarshal([]byte(value), &r.Double)
	}
	if value, ok := fields["string"]; ok {
		r.UnionType = 4
		return json.Unmarshal([]byte(value), &r.String)
	}
	return fmt.Errorf("invalid value for *UnionNullBoolAvroCloudEventDataDoubleString")
}
