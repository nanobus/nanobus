// Code generated by @apexlang/codegen. DO NOT EDIT.

package redis

import (
	"github.com/nanobus/nanobus/pkg/actions"
	"github.com/nanobus/nanobus/pkg/expr"
	"github.com/nanobus/nanobus/pkg/resource"
)

// Reads data and decodes it from a redis store.
type GetConfig struct {
	// The redis store resource to read.
	Resource resource.Ref `json:"resource" yaml:"resource" msgpack:"resource" mapstructure:"resource" validate:"required"`
	// The key to read.
	Key *expr.ValueExpr `json:"key" yaml:"key" msgpack:"key" mapstructure:"key" validate:"required"`
	// Codec is the name of the codec to use for decoding.
	Codec string `json:"codec" yaml:"codec" msgpack:"codec" mapstructure:"codec" validate:"required"`
	// codecArgs are the arguments to pass to the decode function.
	CodecArgs []interface{} `json:"codecArgs,omitempty" yaml:"codecArgs,omitempty" msgpack:"codecArgs,omitempty" mapstructure:"codecArgs" validate:"dive"`
}

func Get() (string, actions.Loader) {
	return "@redis/get", GetLoader
}

// Encodes data and writes it to a Redis store.
type SetConfig struct {
	// The redis store resource to write.
	Resource resource.Ref `json:"resource" yaml:"resource" msgpack:"resource" mapstructure:"resource" validate:"required"`
	// The key to write.
	Key *expr.ValueExpr `json:"key" yaml:"key" msgpack:"key" mapstructure:"key" validate:"required"`
	// The data to write.
	Data *expr.DataExpr `json:"data,omitempty" yaml:"data,omitempty" msgpack:"data,omitempty" mapstructure:"data"`
	// Codec is the name of the codec to use for decoding.
	Codec string `json:"codec" yaml:"codec" msgpack:"codec" mapstructure:"codec" validate:"required"`
	// codecArgs are the arguments to pass to the decode function.
	CodecArgs []interface{} `json:"codecArgs,omitempty" yaml:"codecArgs,omitempty" msgpack:"codecArgs,omitempty" mapstructure:"codecArgs" validate:"dive"`
}

func Set() (string, actions.Loader) {
	return "@redis/set", SetLoader
}

// Removes data from a Redis store.
type RemoveConfig struct {
	// Resource is the name of the connection resource to use.
	Resource resource.Ref `json:"resource" yaml:"resource" msgpack:"resource" mapstructure:"resource" validate:"required"`
	// Data is the input bindings sent.
	Key *expr.ValueExpr `json:"key" yaml:"key" msgpack:"key" mapstructure:"key" validate:"required"`
	// Codec is the name of the codec to use for decoding.
	Codec string `json:"codec" yaml:"codec" msgpack:"codec" mapstructure:"codec" validate:"required"`
	// codecArgs are the arguments to pass to the decode function.
	CodecArgs []interface{} `json:"codecArgs,omitempty" yaml:"codecArgs,omitempty" msgpack:"codecArgs,omitempty" mapstructure:"codecArgs" validate:"dive"`
}

func Remove() (string, actions.Loader) {
	return "@redis/remove", RemoveLoader
}
