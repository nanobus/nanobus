// Code generated by @apexlang/codegen. DO NOT EDIT.

package router

import (
	"encoding/json"
	"fmt"
)

type OAuth2Config struct {
	LoginPath    string   `json:"loginPath" yaml:"loginPath" msgpack:"loginPath" mapstructure:"loginPath"`
	CallbackPath string   `json:"callbackPath" yaml:"callbackPath" msgpack:"callbackPath" mapstructure:"callbackPath"`
	ClientID     string   `json:"clientId" yaml:"clientId" msgpack:"clientId" mapstructure:"clientId"`
	ClientSecret string   `json:"clientSecret" yaml:"clientSecret" msgpack:"clientSecret" mapstructure:"clientSecret"`
	Endpoint     Endpoint `json:"endpoint" yaml:"endpoint" msgpack:"endpoint" mapstructure:"endpoint"`
	RedirectURL  string   `json:"redirectUrl" yaml:"redirectUrl" msgpack:"redirectUrl" mapstructure:"redirectUrl"`
	Scopes       []string `json:"scopes" yaml:"scopes" msgpack:"scopes" mapstructure:"scopes"`
	Pipeline     string   `json:"pipeline" yaml:"pipeline" msgpack:"pipeline" mapstructure:"pipeline"`
}

type Endpoint struct {
	AuthURL     string `json:"authUrl" yaml:"authUrl" msgpack:"authUrl" mapstructure:"authUrl"`
	TokenURL    string `json:"tokenUrl" yaml:"tokenUrl" msgpack:"tokenUrl" mapstructure:"tokenUrl"`
	UserInfoURL string `json:"userInfoUrl" yaml:"userInfoUrl" msgpack:"userInfoUrl" mapstructure:"userInfoUrl"`
	// AuthStyle optionally specifies how the endpoint wants the client ID & client
	// secret sent.
	AuthStyle AuthStyle `json:"authStyle" yaml:"authStyle" msgpack:"authStyle" mapstructure:"authStyle"`
}

type AuthStyle int32

const (
	AuthStyleAutoDetect AuthStyle = 1
	AuthStyleInParams   AuthStyle = 2
	AuthStyleInHeader   AuthStyle = 3
)

var toStringAuthStyle = map[AuthStyle]string{
	AuthStyleAutoDetect: "auto-detect",
	AuthStyleInParams:   "inparams",
	AuthStyleInHeader:   "inheader",
}

var toIDAuthStyle = map[string]AuthStyle{
	"auto-detect": AuthStyleAutoDetect,
	"inparams":    AuthStyleInParams,
	"inheader":    AuthStyleInHeader,
}

func (e AuthStyle) String() string {
	str, ok := toStringAuthStyle[e]
	if !ok {
		return "unknown"
	}
	return str
}

func (e *AuthStyle) FromString(str string) error {
	var ok bool
	*e, ok = toIDAuthStyle[str]
	if !ok {
		return fmt.Errorf("unknown value %q for AuthStyle", str)
	}
	return nil
}

// MarshalJSON marshals the enum as a quoted json string
func (e AuthStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

// UnmarshalJSON unmashals a quoted json string to the enum value
func (e *AuthStyle) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err != nil {
		return err
	}
	return e.FromString(str)
}
