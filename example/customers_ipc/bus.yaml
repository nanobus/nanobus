import:
  - common.yaml

specs:
  - type: widl
    with:
      filename: spec.widl

compute:
  type: stream

resources:
  db:
    type: postgres
    with:
      url: postgres://postgres:postgres@localhost:5432/nanobus

errors:
  customer_not_found:
    type: CustomerNotFound
    code: not_found
    title: Customer not found
    message: Customer {{ pick .key .id }} not found

services:
  'customers.v1.Inbound':
    getCustomer:
      name: Gets the customer record
      steps:
        # - name: Authorize
        #   uses: authorize
        #   with:
        #     has:
        #       - foo
        - name: Forward
          uses: invoke

    createCustomer____ignore:
      name: Saves the customer to the database
      steps:
        - name: Authorize the user
          uses: authorize
          with:
            check:
              scope: dummy

        - name: Call saveCustomer
          call: saveCustomer
        # - name: Set the customer key
        #   uses: '@dapr/set_state'
        #   with:
        #     store: statestore
        #     key: input.id

        # - name: Upsert the customer table
        #   uses: '@dapr/sql_exec'
        #   with:
        #     name: postgres
        #     sql: |
        #       INSERT INTO customers (id, first_name, last_name)
        #       VALUES (:input.id, :input.firstName, :input.lastName)
        #       ON CONFLICT ON CONSTRAINT customers_pkey
        #       DO UPDATE SET first_name = :input.firstName, last_name = :input.lastName;

        - name: Publish a message
          uses: '@dapr/publish_message'
          with:
            pubsub: pubsub
            topic: test_topic
            codec: avro
            codecArgs:
              - 1
            # format: cloudevents+json
            # data: |
            #   {
            #     "type": "customer.created",
            #     "data": input
            #   }

        - name: Return the input as the response
          uses: assign
          with:
            value: input

providers:
  'customers.v1.Outbound':
    saveCustomer:
      name: Saves the customer to the database
      steps:
        - name: Call saveCustomer
          call: saveCustomer
        # - name: Set the customer key
        #   uses: '@dapr/set_state'
        #   with:
        #     store: statestore
        #     key: input.id

        # - name: Upsert the customer table
        #   uses: '@dapr/sql_exec'
        #   with:
        #     name: postgres
        #     sql: |
        #       INSERT INTO customers (id, first_name, last_name)
        #       VALUES (:input.id, :input.firstName, :input.lastName)
        #       ON CONFLICT ON CONSTRAINT customers_pkey
        #       DO UPDATE SET first_name = :input.firstName, last_name = :input.lastName;

    getCustomers:
      name: Query the database for customers
      steps:
        - name: Query customers
          uses: '@postgres/query'
          with:
            resource: db
            sql: SELECT id, first_name, last_name, email FROM customers

    fetchCustomer:
      name: Loads the customer from the database
      steps:
        # - name: Get the state
        #   uses: '@dapr/get_state'
        #   with:
        #     store: statestore
        #     key: input.id
        #     notFoundError: customer_not_found
        
        - name: Get customers
          uses: '@postgres/load'
          with:
            resource: db
            namespace: customers.v1
            type: Customer
            id: input.id
            preload:
              - field: address
            notFoundError: customer_not_found

    customerCreated:
      name: Send a message to the customer
      steps:
        - name: Publish a message
          uses: '@dapr/publish_message'
          with:
            pubsub: pubsub
            topic: test_topic
            codec: avro
            codecArgs:
              - 1
            # format: cloudevents+json
            # data: |
            #   {
            #     "type": "customer.created",
            #     "data": input
            #   }

flows:
  saveCustomer:
    name: Saves the customer to the database
    steps:
      - name: Set the customer key
        uses: '@dapr/set_state'
        with:
          store: statestore
          key: input.id

      - name: Upsert the customer table
        uses: '@dapr/sql_exec'
        with:
          name: postgres
          sql: |
            INSERT INTO customers (id, first_name, last_name, email)
            VALUES (:input.id, :input.firstName, :input.lastName, :input.email)
            ON CONFLICT ON CONSTRAINT customers_pkey
            DO UPDATE SET first_name = :input.firstName, last_name = :input.lastName, email = :input.email;
