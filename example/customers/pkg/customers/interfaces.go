/*
Copyright 2022 The NanoBus Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by @nanobus/codegen. DO NOT EDIT.

package customers

import (
	"context"

	"github.com/nanobus/adapter-go/stateful"
)

type ns struct{}

func (n *ns) Namespace() string {
	return "customers.v1"
}

func (n *ns) Version() string {
	return "0.1.0"
}

// Operations that can be performed on a customer.
type Inbound interface {
	// Creates a new customer.
	CreateCustomer(ctx context.Context, customer *Customer) (*Customer, error)
	// Retrieve a customer by id.
	GetCustomer(ctx context.Context, id uint64) (*Customer, error)
	// Return a page of customers using optional search filters.
	ListCustomers(ctx context.Context, query *CustomerQuery) (*CustomerPage, error)
}

// Stateful operations that can be performed on a customer.
type CustomerActor interface {
	// Creates the customer state.
	CreateCustomer(ctx stateful.Context, customer *Customer) (*Customer, error)
	// Retrieve the customer state.
	GetCustomer(ctx stateful.Context) (*Customer, error)
}

type Outbound interface {
	// Saves a customer to the backend database
	SaveCustomer(ctx context.Context, customer *Customer) error
	// Fetches a customer from the backend database
	FetchCustomer(ctx context.Context, id uint64) (*Customer, error)
	// Sends a customer creation event
	CustomerCreated(ctx context.Context, customer *Customer) error
}

// Customer information.
type Customer struct {
	ns
	// The customer identifer
	ID uint64 `json:"id" msgpack:"id"`
	// The customer's first name
	FirstName string `json:"firstName" msgpack:"firstName"`
	// The customer's middle name
	MiddleName *string `json:"middleName,omitempty" msgpack:"middleName,omitempty"`
	// The customer's last name
	LastName string `json:"lastName" msgpack:"lastName"`
	// The customer's email address
	Email string `json:"email" msgpack:"email"`
	// The customer's address
	Address Address `json:"address" msgpack:"address"`
}

func (c *Customer) Type() string {
	return "Customer"
}

type CustomerQuery struct {
	ns
	// The customer identifer
	ID *uint64 `json:"id,omitempty" msgpack:"id,omitempty"`
	// The customer's first name
	FirstName *string `json:"firstName,omitempty" msgpack:"firstName,omitempty"`
	// The customer's middle name
	MiddleName *string `json:"middleName,omitempty" msgpack:"middleName,omitempty"`
	// The customer's last name
	LastName *string `json:"lastName,omitempty" msgpack:"lastName,omitempty"`
	// The customer's email address
	Email  *string `json:"email,omitempty" msgpack:"email,omitempty"`
	Offset uint64  `json:"offset" msgpack:"offset"`
	Limit  uint64  `json:"limit" msgpack:"limit"`
}

func (c *CustomerQuery) Type() string {
	return "CustomerQuery"
}

type CustomerPage struct {
	ns
	Offset uint64     `json:"offset" msgpack:"offset"`
	Limit  uint64     `json:"limit" msgpack:"limit"`
	Items  []Customer `json:"items" msgpack:"items"`
}

func (c *CustomerPage) Type() string {
	return "CustomerPage"
}

type Nested struct {
	ns
	Foo string `json:"foo" msgpack:"foo"`
	Bar string `json:"bar" msgpack:"bar"`
}

func (n *Nested) Type() string {
	return "Nested"
}

// Address information.
type Address struct {
	ns
	// The address line 1
	Line1 string `json:"line1" msgpack:"line1"`
	// The address line 2
	Line2 *string `json:"line2,omitempty" msgpack:"line2,omitempty"`
	// The city
	City string `json:"city" msgpack:"city"`
	// The state
	State string `json:"state" msgpack:"state"`
	// The zipcode
	Zip string `json:"zip" msgpack:"zip"`
}

func (a *Address) Type() string {
	return "Address"
}

// Error response.
type Error struct {
	ns
	// The detailed error message
	Message string `json:"message" msgpack:"message"`
}

func (e *Error) Type() string {
	return "Error"
}
