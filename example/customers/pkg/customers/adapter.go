/*
Copyright 2022 The NanoBus Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by @nanobus/codegen. DO NOT EDIT.

package customers

import (
	"context"
	"errors"

	"github.com/nanobus/adapter-go/adapter"
	"github.com/nanobus/adapter-go/adapter/rsocket"
	"github.com/nanobus/adapter-go/codec"
	"github.com/nanobus/adapter-go/codec/msgpack"
	"github.com/nanobus/adapter-go/metadata"
	"github.com/nanobus/adapter-go/stateful"
)

type App struct {
	ctx          context.Context
	a            adapter.Adapter
	stateManager *stateful.Manager
}

func NewApp(ctx context.Context, stateCodec codec.Codec, cache stateful.Cache) *App {
	a := rsocket.New(msgpack.New())
	return &App{
		ctx:          ctx,
		a:            a,
		stateManager: stateful.NewManager(cache, a, stateCodec),
	}
}

func (a *App) Start() error {
	err := a.a.Start(a.ctx)
	if errors.Is(err, context.Canceled) {
		err = nil
	}
	return err
}

func (a *App) RegisterInbound(handlers Inbound) {
	a.a.RegisterRR("/customers.v1.Inbound/createCustomer", a.inbound_createCustomerWrapper(handlers.CreateCustomer))
	a.a.RegisterRR("/customers.v1.Inbound/getCustomer", a.inbound_getCustomerWrapper(handlers.GetCustomer))
	a.a.RegisterRR("/customers.v1.Inbound/listCustomers", a.inbound_listCustomersWrapper(handlers.ListCustomers))
}

func (a *App) RegisterCustomerActor(handlers CustomerActor) {
	a.a.RegisterRR("/customers.v1.CustomerActor/deactivate", a.stateManager.DeactivateHandler("customers.v1.CustomerActor", handlers))
	a.a.RegisterRR("/customers.v1.CustomerActor/createCustomer", a.customerActor_createCustomerWrapper(handlers))
	a.a.RegisterRR("/customers.v1.CustomerActor/getCustomer", a.customerActor_getCustomerWrapper(handlers))
}

func (a *App) inbound_createCustomerWrapper(handler func(ctx context.Context, customer *Customer) (*Customer, error)) adapter.RequestResponseHandler {
	return func(ctx context.Context, md metadata.MD, data []byte, sink adapter.MonoSink) {
		ctx = metadata.NewIncomingContext(ctx, md)
		var input Customer
		a.a.HandleRR(data, sink, &input, func() (interface{}, error) {
			result, err := handler(ctx, &input)
			return result, err
		})
	}
}

func (a *App) inbound_getCustomerWrapper(handler func(ctx context.Context, id uint64) (*Customer, error)) adapter.RequestResponseHandler {
	return func(ctx context.Context, md metadata.MD, data []byte, sink adapter.MonoSink) {
		ctx = metadata.NewIncomingContext(ctx, md)
		var inputArgs inboundGetCustomerArgs
		a.a.HandleRR(data, sink, &inputArgs, func() (interface{}, error) {
			result, err := handler(ctx, inputArgs.ID)
			return result, err
		})
	}
}

func (a *App) inbound_listCustomersWrapper(handler func(ctx context.Context, query *CustomerQuery) (*CustomerPage, error)) adapter.RequestResponseHandler {
	return func(ctx context.Context, md metadata.MD, data []byte, sink adapter.MonoSink) {
		ctx = metadata.NewIncomingContext(ctx, md)
		var input CustomerQuery
		a.a.HandleRR(data, sink, &input, func() (interface{}, error) {
			result, err := handler(ctx, &input)
			return result, err
		})
	}
}

func (a *App) customerActor_createCustomerWrapper(stateful CustomerActor) adapter.RequestResponseHandler {
	return func(ctx context.Context, md metadata.MD, data []byte, sink adapter.MonoSink) {
		ctx = metadata.NewIncomingContext(ctx, md)
		sctx, err := a.stateManager.CreateContext(ctx, md, "customers.v1.CustomerActor", stateful)
		if err != nil {
			sink.Error(err)
			return
		}
		var input Customer
		a.a.HandleRR(data, sink, &input, func() (interface{}, error) {
			result, err := stateful.CreateCustomer(sctx, &input)
			return sctx.Response(result, err)
		})
	}
}

func (a *App) customerActor_getCustomerWrapper(stateful CustomerActor) adapter.RequestResponseHandler {
	return func(ctx context.Context, md metadata.MD, data []byte, sink adapter.MonoSink) {
		ctx = metadata.NewIncomingContext(ctx, md)
		sctx, err := a.stateManager.CreateContext(ctx, md, "customers.v1.CustomerActor", stateful)
		if err != nil {
			sink.Error(err)
			return
		}
		a.a.HandleRR(data, sink, nil, func() (interface{}, error) {
			result, err := stateful.GetCustomer(sctx)
			return sctx.Response(result, err)
		})
	}
}

func (a *App) NewOutbound() Outbound {
	return NewOutboundProvider(a.a)
}

type OutboundProvider struct {
	a adapter.Adapter
}

func NewOutboundProvider(a adapter.Adapter) *OutboundProvider {
	return &OutboundProvider{
		a: a,
	}
}

// Saves a customer to the backend database
func (m *OutboundProvider) SaveCustomer(ctx context.Context, customer *Customer) error {
	return m.a.InvokeFF(ctx, "/customers.v1.Outbound/saveCustomer", customer)
}

// Fetches a customer from the backend database
func (m *OutboundProvider) FetchCustomer(ctx context.Context, id uint64) (*Customer, error) {
	var ret Customer
	inputArgs := outboundFetchCustomerArgs{
		ID: id,
	}
	err := m.a.InvokeRR(ctx, "/customers.v1.Outbound/fetchCustomer", inputArgs, &ret)
	return &ret, err
}

// Sends a customer creation event
func (m *OutboundProvider) CustomerCreated(ctx context.Context, customer *Customer) error {
	return m.a.InvokeFF(ctx, "/customers.v1.Outbound/customerCreated", customer)
}

type inboundGetCustomerArgs struct {
	ID uint64 `json:"id" msgpack:"id"`
}

type outboundFetchCustomerArgs struct {
	ID uint64 `json:"id" msgpack:"id"`
}
