compute:
  type: mux

codecs:
  avro:
    type: confluentavro
    with:
      schemaRegistryURLs:
        - http://localhost:8081

subscriptions:
  - pubsub: pubsub
    topic: test_topic
    codec: avro
    #function: receiveMessage

resiliency:
  retries:
    pubsub:
      policy: constant
      duration: 3s

  circuitBreakers:
    pubsub:
      maxRequests: 2
      timeout: 30s

events:
  "io.nanobus.examples.customers.Customer":
    summary: Receives the customer message
    steps:
      - summary: Send to route
        name: invoke
        with:
          namespace: welcome.v1.Inbound
          operation: greetCustomer
          input: input.data
        retry: pubsub
        circuitBreaker: pubsub

  receiveMessage:
    summary: Receives the customer message
    steps:
      - summary: Routing message
        name: route
        with:
          routes:
            #- when: input.type == 'customer.created'
            - when: input.type == 'io.nanobus.examples.customers.Customer'
              then:
                - summary: Send to route
                  name: invoke
                  with:
                    namespace: welcome.v1.Inbound
                    operation: greetCustomer
                    input: input.data
                  retry: pubsub
                  circuitBreaker: pubsub

providers:
  'welcome.v1.Outbound':
    sendEmail:
      summary: Sends an email to the customer
      steps:
        - summary: Pretend to send an email by logging the message
          name: log
          with:
            format: "Sending email to %s with message %q"
            args:
              - input.email
              - input.message
