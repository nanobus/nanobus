specs:
  - type: apex
    with:
      filename: spec.apex

compute:
  type: wapc
  with:
    filename: build/customers.wasm

filters:
  http:
    - type: jwt
      with:
        rsaPublicKeyFile: ../../public.pem

codecs:
  avro:
    type: confluentavro
    with:
      schemaRegistryURLs:
        - http://localhost:8081

errors:
  permission_denied:
    type: PermissionDenied
    code: permission_denied
    title: Permission denied
    message: You are not authorized to perform this operation.

  customer_not_found:
    type: CustomerNotFound
    code: not_found
    title: Customer not found
    message: Customer {{ .key }} not found

services:
  'customers.v1.Inbound':
    getCustomer:
      name: Gets the customer record
      steps:
        # - name: Authorize
        #   uses: authorize
        #   with:
        #     has:
        #       - foo
        - name: forward
          uses: invoke

    createCustomer____ignore:
      name: Saves the customer to the database
      steps:
        - name: Authorize the user
          uses: authorize
          with:
            check:
              scope: dummy

        - name: Set the customer key
          uses: '@dapr/set_state'
          with:
            store: statestore
            key: input.id

        - name: Upsert the customer table
          uses: '@dapr/sql_exec'
          with:
            name: postgres
            sql: |
              INSERT INTO customers (id, first_name, last_name)
              VALUES (:input.id, :input.firstName, :input.lastName)
              ON CONFLICT ON CONSTRAINT customers_pkey
              DO UPDATE SET first_name = :input.firstName, last_name = :input.lastName;

        - name: Publish a message
          uses: '@dapr/publish_message'
          with:
            pubsub: pubsub
            topic: test_topic
            codec: avro
            codecArgs:
              - 1
            # format: cloudevents+json
            # data: |
            #   {
            #     "type": "customer.created",
            #     "data": input
            #   }

        - name: Return the input as the response
          uses: assign
          with:
            value: input

providers:
  'customers.v1.Outbound':
    saveCustomer:
      name: Saves the customer to the database
      steps:
        - name: Set the customer key
          uses: '@dapr/set_state'
          with:
            store: statestore
            key: input.id

        - name: Upsert the customer table
          uses: '@dapr/sql_exec'
          with:
            name: postgres
            sql: |
              INSERT INTO customers (id, first_name, last_name)
              VALUES (:input.id, :input.firstName, :input.lastName)
              ON CONFLICT ON CONSTRAINT customers_pkey
              DO UPDATE SET first_name = :input.firstName, last_name = :input.lastName;

    fetchCustomer:
      name: Loads the customer from the database
      steps:
        - name: Get the state
          uses: '@dapr/get_state'
          with:
            store: statestore
            key: input.id
            notFoundError: customer_not_found

    customerCreated:
      name: Send a message to the customer
      steps:
        - name: Publish a message
          uses: '@dapr/publish_message'
          with:
            pubsub: pubsub
            topic: test_topic
            codec: avro
            codecArgs:
              - 1
            # format: cloudevents+json
            # data: |
            #   {
            #     "type": "customer.created",
            #     "data": input
            #   }
