# Copyright 2022 The NanoBus Authors.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

namespace "nanobus.actions.core"

alias ValueExpr = string
alias DataExpr = string
alias Handler = string

"An alias for runtime.Step"
alias Step = any

"""
Lorem ipsum dolor sit amet, consectetur adipiscing elit.
Phasellus a tellus nec metus tempus volutpat nec non velit.
Nulla feugiat cursus dui, eu consequat enim vestibulum in.
Mauris pulvinar posuere interdum. Vivamus pharetra elementum lobortis.
Morbi blandit aliquam nisi. In in molestie quam. Interdum et
malesuada fames ac ante ipsum primis in faucibus. Nullam vulputate
congue viverra. Pellentesque consequat nisi ut ante blandit, nec
congue ex tincidunt. Suspendisse ac sem vel velit aliquam bibendum.
Phasellus nec mi vitae nulla ultrices maximus a sit amet ipsum.
"""
type AuthorizeConfig
  @tags(["Security"])
  @action("authorize")
  @examples([
  {
    title: "Check user authenticated",
    formats: {
      "YAML": """
interfaces:
  MyService:
    myOperation:
      steps:
        - name: "Check user authenticated"
          uses: "authorize"
          with:
            has: "sub"
      """,
      "TypeScript": """
import { authorize } from "https://deno.land/x/nanobus_config@v0.0.12/mod.ts";

MyService.register(app, {
  myOperation: ({flow}) =>
    flow:.then(
      "Check user authenticated",
      ($) => authorize({
        has: "sub",
      })
    )
})
      """
    }
  }
]) {
  "Condition is the predicate expression for authorization."
  condition: ValueExpr?
  has:       [string]?
  check:     { string : any }?
  error:     string = "permission_denied"
}

"""
TODO
"""
type CallInterfaceConfig
  @tags(["Flow"])
  @action("call_interface") {
  handler: Handler
  input:   DataExpr?
}

"""
TODO
"""
type CallProviderConfig
  @tags(["Flow"])
  @action("call_provider") {
  handler: Handler
  input:   DataExpr?
}

"""
TODO
"""
type DecodeConfig
  @tags(["Transform"])
  @action("decode") {
  typeField: string
  dataField: string
  "Codec is the name of the codec to use for decoding."
  codec:     string
  "codecArgs are the arguments to pass to the decode function."
  codecArgs: [any]?
}

"""
TODO
"""
type ExprConfig
  @tags(["Transform"])
  @action("expr") {
  value: ValueExpr? @validate("required_without=Data")
  data:  DataExpr?  @validate("required_without=Value")
  to:    string?
}

"""
TODO
"""
type FilterConfig
  @tags(["Flow"])
  @action("filter") {
  "Condition is the predicate expression for filtering."
  condition: ValueExpr
}

"""
TODO
"""
type HTTPResponseConfig
  @tags(["HTTP"])
  @action("http_response") {
  status: u32?
  headers: [HTTPResponseHeader]?
}

"""
TODO
"""
type HTTPResponseHeader {
  name:  string
  value: ValueExpr
}

"""
TODO
"""
type HTTPConfig
  @tags(["Request"])
  @action("http") {
  "URL is HTTP URL to request."
  url: string
  "Method is the HTTP method."
  method: string
  "Body is the data to sent as the body payload."
  body: DataExpr?
  "Metadata is the input binding metadata."
  headers: DataExpr?
  "Output is an optional transformation to be applied to the response."
  output: DataExpr?
  "Codec is the name of the codec to use for decoing."
  codec: string
  "Args are the arguments to pass to the decode function."
  codecArgs: [any]?
}

"""
TODO
"""
type InvokeConfig
  @tags(["Flow"])
  @action("invoke") {
  "Name of the handler to invoke."
  handler: Handler?
  "Input optionally transforms the input sent to the function."
  input: DataExpr?
}

"""
TODO
"""
type JMESPathConfig
  @tags(["Transform"])
  @action("jmespath") {
  "Path is the predicate expression for filtering."
  path: string
  "Data is the optional data expression to pass to jq."
  data: DataExpr?
  "Var, if set, is the variable that is set with the result."
  var: string?
}

"""
TODO
"""
type JQConfig
  @tags(["Transform"])
  @action("jq") {
  "Query is the predicate expression for filtering."
  query: string
  "Data is the optional data expression to pass to jq."
  data: DataExpr?
  "Single, if true, returns the first result."
  single: bool = false
  "Var, if set, is the variable that is set with the result."
  var: string?
}

"""
TODO
"""
type LogConfig
  @tags(["Observability"])
  @action("log") {
  format: string
  "Args are the evaluations to use as arguments into the string format."
  args:  [ValueExpr]?
}

"""
TODO
"""
type ReCaptchaConfig
  @tags(["Security"])
  @action("recaptcha") {
  siteVerifyUrl: string = "https://www.google.com/recaptcha/api/siteverify"
  secret:        string
  response:      ValueExpr
  score:         f64 = 0.5
  action:        string?
}

"""
TODO
"""
type RouteConfig
  @tags(["Flow"])
  @action("route") {
  "Selection defines the selection mode: single or multi."
  selection: SelectionMode = Single
  "Routes are the possible runnable routes which conditions for selection."
  routes: [RouteCondition]
}

"SelectionMode indicates how many routes can be selected."
enum SelectionMode {
  Single = 1 as "single"
  Multi  = 2 as "multi"
}

"""
TODO
"""
type RouteCondition {
  "Name if the overall summary of this route."
  name: string
  "When is the predicate expression for filtering."
  when: ValueExpr
  "Then is the steps to process."
  then: [Step]
}
